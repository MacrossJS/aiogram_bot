import copy
import json
import os
from os.path import getctime
from datetime import datetime
from random import choice
import colorama as colorama
from aiogram import Dispatcher, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command, Text
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup,
                           InlineKeyboardMarkup, Message, BotCommand, InputMediaPhoto)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types.web_app_info import WebAppInfo
from config_data.config import Config, load_config

# from Tokyo_Users_statistic import *

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

colorama.init()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
bot: Bot = Bot(token=config.tg_bot.token,
               parse_mode='HTML')
print(config.tg_bot.token)
dp: Dispatcher = Dispatcher()

ADMINS = config.tg_bot.admin_ids

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
FIELD_SIZE: int = 8
ATTEMPT = 35

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
LEXICON: dict = {
    '/start': '–ü—Ä–∏–≤–µ—Ç <b>{0}</b>!\n–¢—É—Ç –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ <b>New Tokyo - Online Game</b>',
    '/game': '–ü—Ä–∏–≤–µ—Ç <b>{0}</b>, –≤–æ—Ç —Ç–≤–æ–µ –ø–æ–ª–µ. –ù–∞–π–¥–∏ –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏!\n–û–¥–∏–Ω <b>x4</b>, –¥–≤–∞ <b>x3</b> –∏ —Ç—Ä–∏'
             ' <b>x2</b>\n–£ –≤–∞—Å –µ—Å—Ç—å <b>{1}</b> –≤—ã—Å—Ç—Ä–µ–ª–æ–≤!',
    '/help': '–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º API –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram'
             ' 3.0.0b7, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏, –∞ —Ç–∞–∫ –∂–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å —Å–≤–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.',
    '/raiting': '<b>–°–ø–∏—Å–æ–∫ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n',
    0: '___',
    1: 'üåä',
    2: 'üí•',
    'miss': '–ú–∏–º–æ!',
    'hit': '–ü–æ–ø–∞–ª!',
    'used': '–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞!',
    'next_move': '–î–µ–ª–∞–π—Ç–µ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥!\n–£ –≤–∞—Å <b>{0}</b> –≤—ã—Å—Ç—Ä–µ–ª–æ–≤\n–û—Å—Ç–∞–ª–æ—Å—å <b>{1}</b> –≤—Ä–∞–≥–æ–≤!',
    'loose': '–£–≤—ã, <b>{0}</b> –Ω–æ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(=\n–ú–æ–∂–µ—Ç –µ—â–µ –ø–æ–ø—ã—Ç–∫—É?',
    'win': 'üéâ<b>–£—Ä–∞, {0} - –ü–æ–±–µ–¥–∏—Ç–µ–ª—å!</b>üéâ\n–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å –∑–∞ <b>{1}</b> –ø–æ–ø—ã—Ç–æ–∫!',
    'photo_id1': 'AgACAgIAAxkBAAIPRWWA86CxsPXblsSptx12sHyNvnV-AAJB0jEbNDAISF99wPoT9X2_AQADAgADeQADMwQ',
    'photo_id2': 'AgACAgIAAxkBAAIPR2WA87Ez0Mb9ZejhPm9v69PG1ij3AAJC0jEbNDAISIPlFqIB3QXlAQADAgADeQADMwQ',
    'photo_sewerage_1': 'AgACAgIAAxkBAAIP4GWHFDJHdpM67xPn8Zj02BvR0GjnAAIq0jEbrKk5SIshTLvxMK5jAQADAgADeQADMwQ',
    'photo_sewerage_2': 'AgACAgIAAxkBAAIQAAFlhysdLJVv5FddLy-_MmonLh-5twACztIxG6ypOUixAhlart_u5wEAAwIAA3kAAzME',
    'photo_old_park': 'AgACAgIAAxkBAAIQCWWHQwAB_PsCCAAB-Kh3zkpMLqJyoRMAAsLYMRsfezhIIa-sdFw4dTkBAAMCAAN5AAMzBA',
    'photo_rework': 'AgACAgIAAxkBAAIP7WWHGP81u4g5dFST_MHdHlynVOUFAAJZ0jEbrKk5SHRWDE_fL3oWAQADAgADeQADMwQ'
}

LEXICON_BTN: dict[str, str] = {
    'btn_phone': '‚òéÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
    'btn_geo': 'üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
    'btn_web': 'üåê Start Web App'}

LEXICON_COMMANDS2: dict[str, str] = {
    '/start': 'Tokyo Info',
    '/game': '–ú–æ—Ä—Å–∫–æ–π –±–æ–π',
    '/raiting': '–¢–æ–ø –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
    '/help': '–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞',
    '/admins': "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
}

# –•–∞—Ä–¥–∫–æ–¥–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
ships: list[list[int]] = [
    [1, 0, 1, 1, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0]]

ships2: list[list[int]] = [
    [0, 0, 0, 0, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 1]]

ships3: list[list[int]] = [
    [0, 0, 0, 0, 0, 0, 0, 1],
    [0, 1, 1, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 1, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0]]

ships4: list[list[int]] = [
    [0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 1, 1],
    [0, 0, 1, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 0, 0]]

ships5: list[list[int]] = [
    [0, 0, 0, 1, 1, 1, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1],
    [0, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]]

ships_test: list[list[int]] = [
    [1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db = {}
folder = "database"
db_name = "tg_users_db"
team = [250, 352, 301, 225, 351, 247, 268, 283, 288, 269, 363, 371, 447, 387, 388, 222]


def time_now():
    """–ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –û–°"""
    return datetime.today().strftime('%H:%M:%S')


def log(user, log_text):
    """–°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∞
    —Ü–≤–µ—Ç + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –∏–º—è –±–æ—Ç–∞"""
    color = 90 + user.id % 10
    user_info = f"{user.first_name} {user.last_name if user.last_name else ''} | @{user.username} ({user.id})"
    print(f"\033[{color}m{time_now()}: [{user_info}]\n--> {log_text}")


def load_from_json():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è users –ø–æ—Å—Ä–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞"""
    global users_db
    if os.path.isfile(f'{folder}/{db_name}.json'):
        with open(f'{folder}/{db_name}.json', 'rb') as from_db:
            users_db = json.load(from_db, object_hook=lambda arr: {int(key) if key.isdigit()
                                                                   else key: arr[key] for key in arr})


def dump_in_json():
    """–°–û—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è users_db –≤ json-—Ñ–∞–π–ª"""
    with open(f'{folder}/{db_name}.json', 'w') as save:
        json.dump(users_db, save)


def get_logs_list():
    """–ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
    log_list = os.listdir(f'logs\\')
    return log_list


def load_last_file(file_last):
    """–ó–∞–≥—Ä—É–∑–∏–º –∏–Ω—Ñ–æ –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö –∏–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å"""
    with open(f"logs/{file_last}", 'r', encoding='utf-8') as last_file:
        users_last = json.load(last_file)
    return users_last


def load_penult_file(file_penult):
    """–ó–∞–≥—Ä—É–∑–∏–º –∏–Ω—Ñ–æ –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö –∏–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å"""
    with open(f"logs/{file_penult}", 'r', encoding='utf-8') as penult_file:
        users_penult = json.load(penult_file)
    return users_penult


def create_progress(users: dict, users_old: dict) -> dict:
    """–î–æ–±–∞–≤–∏–º –≤ users –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—Ä–æ—Å—Ç–∞ –æ–ø—ã—Ç–∞ –∏ –ø–æ–±–µ–¥ –∑–∞ —Å—É—Ç–∫–∏"""
    for key in users:
        if key in users_old:
            users[key]['rise'] = users[key]['exp'] - users_old[key]['exp']
            users[key]['kills'] = users[key]['wins'] - users_old[key]['wins']
        else:
            users[key]['rise'] = users[key]['exp']
            users[key]['kills'] = users[key]['wins']
    return users


def create_progress_users(users, top=1):
    """–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Ä–æ—Å—Ç–∞ –æ–ø—ã—Ç–∞"""
    for key, value in sorted(users.items(), key=lambda x: -x[1]['rise']):
        icon = 'üîù' if int(key) in team else ''
        print(f"{top}. {icon}{value['name']}[{value['level']}] ‚û°  +{value['rise']}‚≠ê +{value['kills']}‚öîÔ∏è")
        top += 1
        if value['rise'] < 100:
            break


# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–µ—Ñ–∏–∫—Å
# –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É callback_data
class FieldCallbackFactory(CallbackData, prefix="user_field"):
    x: int
    y: int


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def reset_field(user_id: int) -> None:
    users_db[user_id]['ships'] = copy.deepcopy(choice([ships, ships2, ships3, ships4, ships5]))
    # users_db[user_id]['ships'] = copy.deepcopy(ships_test)
    users_db[user_id]['field'] = [[0 for _ in range(FIELD_SIZE)]
                                  for _ in range(FIELD_SIZE)]
    users_db[user_id]['attempt'] = ATTEMPT
    users_db[user_id]['ships_count'] = sum([sum(ship) for ship in users_db[user_id]['ships']])
    users_db[user_id]['total_games'] += 1


def create_inline_kb(width: int, *args: str, go_exit: str | None = None, **kwargs: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    for button in args:
        buttons.append(InlineKeyboardButton(
            text=LEXICON.get(button, button), callback_data=button))
    for button, text in kwargs.items():
        buttons.append(InlineKeyboardButton(text=text, callback_data=button))
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–ª–¥–µ—Ä –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    if go_exit:
        kb_builder.row(InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='go_exit'))
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


def create_reply_kb():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: ReplyKeyboardBuilder = ReplyKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    contact_btn: KeyboardButton = KeyboardButton(
        text=LEXICON_BTN['btn_phone'],
        request_contact=True)
    geo_btn: KeyboardButton = KeyboardButton(
        text=LEXICON_BTN['btn_geo'],
        request_location=True)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web_app_btn: KeyboardButton = KeyboardButton(
        text=LEXICON_BTN['btn_web'],
        web_app=WebAppInfo(url="https://macrossjs.github.io/"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–∏–ª–¥–µ—Ä
    kb_builder.row(contact_btn, geo_btn, web_app_btn, width=1)
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard: ReplyKeyboardMarkup = kb_builder.as_markup(resize_keyboard=True,
                                                         one_time_keyboard=True,
                                                         input_field_placeholder='–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∏–∑ –∫–Ω–æ–ø–æ–∫')
    return keyboard


# –§—É–Ω–∫—Ü–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑
# –º–∞—Ç—Ä–∏—Ü—ã —Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_field_keyboard(user_id: int) -> InlineKeyboardMarkup:
    array_buttons: list[list[InlineKeyboardButton]] = []

    for i in range(FIELD_SIZE):
        array_buttons.append([])
        for j in range(FIELD_SIZE):
            array_buttons[i].append(InlineKeyboardButton(
                text=LEXICON[users_db[user_id]['field'][i][j]],
                callback_data=FieldCallbackFactory(x=i, y=j).pack()))

    markup: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=array_buttons)
    return markup


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", –æ–±–Ω—É–ª—è—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@dp.message(CommandStart())
async def process_start_command(message: Message):
    user = message.from_user
    log(user, '–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')
    await message.answer(
        text=LEXICON['/start'].format(message.from_user.first_name),
        parse_mode="HTML",
        reply_markup=create_inline_kb(3, top_all='üèÜ–¢–æ–ø',
                                      progress='üìà–†–æ—Å—Ç',
                                      top_stats='üß†–°—Ç–∞—Ç—ã',
                                      top_rep='üîî–†–µ–ø—É—Ç–∞—Ü–∏—è',
                                      dayly_tokyo="üè∞–î–µ–π–ª–∏–∫–∏",
                                      maps_sewerage_1="üó∫–ö–∞—Ä—Ç—ã"))


@dp.callback_query(Text(text='top_all'))
async def process_top_all(callback: CallbackQuery):
    logs_list = get_logs_list()
    log(callback.from_user, '–ó–∞–ø—Ä–æ—Å–∏–ª üèÜ–¢–æ–ø')
    users = load_last_file(logs_list[-1])
    users_old = load_penult_file(logs_list[-2])
    all_users: dict = create_progress(users, users_old)
    ctime = datetime.fromtimestamp(getctime(f"logs/{logs_list[-1]}")).strftime('%d.%m.%Y –≤ %H:%M')
    answer = f"üìä–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã {ctime} –º—Å–∫" \
             f"\nüîÑ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!" \
             f"\nüë•–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(all_users)} (+{len(users) - len(users_old)}üë§)" \
             f"\n\nüèÜ–¢–æ–ø-50 –∏–≥—Ä–æ–∫–æ–≤ Tokyo:\n\n"
    numb = 1
    for key, value in sorted(all_users.items(), key=lambda x: -x[1]['exp']):
        icon = 'üòé' if int(key) in team else ''
        answer += f"{numb}. {icon}<a href='https://3ze.ru/user/#{key}'>{value['name']}</a>[<b>{value['level']}</b>]" \
                  f" >> {value['wins']}‚öî,  {value['exp']}‚≠ê\n"
        numb += 1
        if numb > 50:
            break
    # print(answer, len(answer))
    await callback.message.edit_text(text=answer, parse_mode="HTML",
                                     reply_markup=create_inline_kb(3, X='üèÜ–¢–æ–ø',
                                                                   progress='üìà–†–æ—Å—Ç',
                                                                   top_stats='üß†–°—Ç–∞—Ç—ã',
                                                                   top_rep='üîî–†–µ–ø—É—Ç–∞—Ü–∏—è',
                                                                   dayly_tokyo="üè∞–î–µ–π–ª–∏–∫–∏",
                                                                   maps_sewerage_1="üó∫–ö–∞—Ä—Ç—ã"))
    await callback.answer()


@dp.callback_query(Text(text='progress'))
async def process_top_progress(callback: CallbackQuery):
    logs_list = get_logs_list()
    log(callback.from_user, '–ó–∞–ø—Ä–æ—Å–∏–ª üìà–†–æ—Å—Ç')
    users = load_last_file(logs_list[-1])
    users_old = load_penult_file(logs_list[-2])
    all_users: dict = create_progress(users, users_old)
    ctime = datetime.fromtimestamp(getctime(f"logs/{logs_list[-1]}")).strftime('%d.%m.%Y –≤ %H:%M')
    answer = f"üìä–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã {ctime} –º—Å–∫" \
             f"\nüîÑ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!" \
             f"\nüë•–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(all_users)} (+{len(users) - len(users_old)}üë§)" \
             f"\n\nüìà–ü—Ä–∏—Ä–æ—Å—Ç –æ–ø—ã—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏:\n\n"
    numb = 1
    for key, value in sorted(users.items(), key=lambda x: -x[1]['rise']):
        icon = 'üòé' if int(key) in team else ''
        answer += f"{numb}. {icon}<a href='https://3ze.ru/user/#{key}'>{value['name']}</a>[<b>{value['level']}</b>]" \
                  f" >> +{value['rise']}‚≠ê,  +{value['kills']}‚öî\n"
        numb += 1
        if value['rise'] < 50:
            break
    await callback.message.edit_text(text=answer,
                                     parse_mode="HTML",
                                     reply_markup=create_inline_kb(3, top_all='üèÜ–¢–æ–ø',
                                                                   X='üìà–†–æ—Å—Ç',
                                                                   top_stats='üß†–°—Ç–∞—Ç—ã',
                                                                   top_rep='üîî–†–µ–ø—É—Ç–∞—Ü–∏—è',
                                                                   dayly_tokyo="üè∞–î–µ–π–ª–∏–∫–∏",
                                                                   maps_sewerage_1="üó∫–ö–∞—Ä—Ç—ã"))
    await callback.answer()


@dp.callback_query(Text(text='top_stats'))
async def process_top_stats(callback: CallbackQuery):
    logs_list = get_logs_list()
    log(callback.from_user, '–ó–∞–ø—Ä–æ—Å–∏–ª üß†–°—Ç–∞—Ç—ã')
    users = load_last_file(logs_list[-1])
    users_old = load_penult_file(logs_list[-2])
    ctime = datetime.fromtimestamp(getctime(f"logs/{logs_list[-1]}")).strftime('%d.%m.%Y –≤ %H:%M')
    answer = f"üìä–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã {ctime} –º—Å–∫" \
             f"\nüîÑ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!" \
             f"\nüë§–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)} (+{len(users) - len(users_old)}üë§)" \
             f"\n\nüß†–¢–æ–ø –ø–æ —Å—É–º–º–µ —Å—Ç–∞—Ç–æ–≤ (üí™-ü§π‚Äç‚ôÇ-üß†-üïµÔ∏è‚Äç‚ôÇ-‚ù§)\n\n"
    numb = 1
    for key, value in sorted(users.items(), key=lambda x: -x[1]['sum_stats']):
        icon = 'üòé' if int(key) in team else ''
        answer += f"{numb}. {icon}<a href='https://3ze.ru/user/#{key}'>{value['name']}</a>[<b>{value['level']}</b>]" \
                  f" >> <b>{value['sum_stats']}</b> ({value['strength']}-{value['agility']}-{value['wisdom']}-" \
                  f"{value['intuition']}-{value['vitality']})\n"
        numb += 1
        if numb > 30:
            break
    await callback.message.edit_text(text=answer,
                                     parse_mode="HTML",
                                     reply_markup=create_inline_kb(3, top_all='üèÜ–¢–æ–ø',
                                                                   progress='üìà–†–æ—Å—Ç',
                                                                   X='üß†–°—Ç–∞—Ç—ã',
                                                                   top_rep='üîî–†–µ–ø—É—Ç–∞—Ü–∏—è',
                                                                   dayly_tokyo="üè∞–î–µ–π–ª–∏–∫–∏",
                                                                   maps_sewerage_1="üó∫–ö–∞—Ä—Ç—ã"))
    await callback.answer()


@dp.callback_query(Text(text='top_rep'))
async def process_top_stats(callback: CallbackQuery):
    logs_list = get_logs_list()
    log(callback.from_user, '–ó–∞–ø—Ä–æ—Å–∏–ª üîî–†–µ–ø—É—Ç–∞—Ü–∏—è')
    users = load_last_file(logs_list[-1])
    users_old = load_penult_file(logs_list[-2])
    ctime = datetime.fromtimestamp(getctime(f"logs/{logs_list[-1]}")).strftime('%d.%m.%Y –≤ %H:%M')
    answer = f"üìä–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã {ctime} –º—Å–∫" \
             f"\nüîÑ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!" \
             f"\nüë§–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(users)} (+{len(users) - len(users_old)}üë§)" \
             f"\n\nüîî–¢–æ–ø –ø–æ —Å—É–º–º–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–π (NTüü¢ + Marsüî¥)\n\n"
    numb = 1
    for key, value in sorted(users.items(), key=lambda x: -x[1]['sum_rep']):
        icon = 'üòé' if int(key) in team else ''
        answer += f"{numb}. {icon}<a href='https://3ze.ru/user/#{key}'>{value['name']}</a>[<b>{value['level']}</b>]" \
                  f" >> <b>{value['sum_rep']}</b> ({value['rep_NT']} + {value['rep_Mars']})\n"
        numb += 1
        if value['sum_rep'] < 1:
            break
    await callback.message.edit_text(text=answer,
                                     parse_mode="HTML",
                                     reply_markup=create_inline_kb(3, top_all='üèÜ–¢–æ–ø',
                                                                   progress='üìà–†–æ—Å—Ç',
                                                                   top_stats='üß†–°—Ç–∞—Ç—ã',
                                                                   X='üîî–†–µ–ø—É—Ç–∞—Ü–∏—è',
                                                                   dayly_tokyo="üè∞–î–µ–π–ª–∏–∫–∏",
                                                                   maps_sewerage_1="üó∫–ö–∞—Ä—Ç—ã"))
    await callback.answer()


async def edit_message_with_media(message, way: int):
    if way:
        await message.answer_photo(photo=LEXICON[f'photo_id1'], caption="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã Tokyo",
                                   reply_markup=create_inline_kb(2, go_exit="go_exit", dayly_tokyo="üè∞–¢–æ–∫–∏–æ",
                                                                 dayly_rim="–†–∏–º‚û°"))
    else:
        await message.answer_photo(photo=LEXICON[f'photo_sewerage_1'], caption="–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂",
                                   reply_markup=create_inline_kb(2, go_exit="go_exit",
                                                                 maps_sewerage_1="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂",
                                                                 maps_sewerage_2="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂",
                                                                 maps_old_park="üó∫–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫",
                                                                 maps_druids_forest="üó∫–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤"))


@dp.callback_query(Text(text='dayly_tokyo'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, '‚¨Ö–¢–æ–∫–∏–æ')
    if callback.message.photo:
        await callback.message.edit_media(
            media=InputMediaPhoto(media=LEXICON['photo_id1'],
                                  caption='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¢–æ–∫–∏–æ'),
            reply_markup=create_inline_kb(2, go_exit="go_exit", dayly_tokyo_X="üè∞–¢–æ–∫–∏–æ", dayly_rim="–†–∏–º‚û°"))
    else:
        await edit_message_with_media(callback.message, 1)
    await callback.answer()


@dp.callback_query(Text(text='dayly_rim'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, '–†–∏–º‚û°')
    if callback.message.photo:
        await callback.message.edit_media(media=InputMediaPhoto(media=LEXICON['photo_id2'],
                                                                caption='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –†–∏–º'),
                                          reply_markup=create_inline_kb(2, go_exit="go_exit",
                                                                        dayly_tokyo="‚¨Ö–¢–æ–∫–∏–æ",
                                                                        dayly_rim_X="üè∞–†–∏–º"))
    await callback.answer()


@dp.callback_query(Text(text='go_exit'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, '–£–¥–∞–ª–∏–ª —Å–æ–±—â–µ–Ω–∏–µ')
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)


@dp.callback_query(Text(text='maps_sewerage_1'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂')
    if callback.message.photo:
        await callback.message.edit_media(
            media=InputMediaPhoto(media=LEXICON['photo_sewerage_1'], caption='–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂'),
            reply_markup=create_inline_kb(2, go_exit="go_exit", X="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂",
                                          maps_sewerage_2="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂", maps_old_park="üó∫–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫",
                                          maps_druids_forest="üó∫–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤"))
    else:
        await edit_message_with_media(callback.message, 0)
    await callback.answer()


@dp.callback_query(Text(text='maps_sewerage_2'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, 'üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂')
    if callback.message.photo:
        await callback.message.edit_media(
            media=InputMediaPhoto(media=LEXICON['photo_sewerage_2'], caption='–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂'),
            reply_markup=create_inline_kb(2, go_exit="go_exit", maps_sewerage_1="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂",
                                          X="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂", maps_old_park="üó∫–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫",
                                          maps_druids_forest="üó∫–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤"))


@dp.callback_query(Text(text='maps_old_park'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, 'üó∫–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫')
    if callback.message.photo:
        await callback.message.edit_media(
            media=InputMediaPhoto(media=LEXICON['photo_old_park'], caption='–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫'),
            reply_markup=create_inline_kb(2, go_exit="go_exit", maps_sewerage_1="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂",
                                          maps_sewerage_2="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂", X="üó∫–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫",
                                          maps_druids_forest="üó∫–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤"))


@dp.callback_query(Text(text='maps_druids_forest'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, 'üó∫–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤')
    if callback.message.photo:
        await callback.message.edit_media(
            media=InputMediaPhoto(media=LEXICON['photo_rework'], caption='–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤'),
            reply_markup=create_inline_kb(2, go_exit="go_exit", maps_sewerage_1="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 1 —ç—Ç–∞–∂",
                                          maps_sewerage_2="üó∫–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–∂", maps_old_park="üó∫–°—Ç–∞—Ä—ã–π –ø–∞—Ä–∫",
                                          X="üó∫–õ–µ—Å –¥—Ä—É–∏–¥–æ–≤"))


@dp.callback_query(Text(text='X'))
async def callback_handler(callback: CallbackQuery):
    log(callback.from_user, "–í—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É!")
    await callback.answer("–í—ã —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É!\n–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")


@dp.message(F.content_type.in_({'photo', 'audio', 'voice', 'video', 'document'}))
async def send_echo(message: Message):
    # print(message.json(indent=4, exclude_none=True))
    if message.photo:
        file_type, file_id, unique_id = "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", message.photo[-1].file_id, message.photo[-1].file_unique_id
    elif message.video:
        file_type, file_id, unique_id = "üé¨ –í–∏–¥–µ–æ", message.video.file_id, message.video.file_unique_id
    elif message.audio:
        file_type, file_id, unique_id = "üé∂ –ê—É–¥–∏–æ", message.audio.file_id, message.audio.file_unique_id
    elif message.document:
        file_type, file_id, unique_id = "üìë –î–æ–∫—É–º–µ–Ω—Ç", message.document.file_id, message.document.file_unique_id
    elif message.voice:
        file_type, file_id, unique_id = "üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", message.voice.file_id, message.voice.file_unique_id
    else:
        file_type, file_id, unique_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", None, None
    answer = f"–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏: <b>{file_type}</b>\n\n<b>ID:</b> {file_id}\n\n<b>UNIQUE_ID:</b> {unique_id}"
    await message.answer(answer, parse_mode='HTML')


@dp.message(Command(commands='game'))
async def process_start_game(message: Message):
    user = message.from_user
    if user.id not in users_db:
        users_db[user.id] = {}
        log(user, '–°–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ')
        users_db[user.id]['user_name'] = user.first_name or user.username
        users_db[user.id]['win'] = 0
        users_db[user.id]['total_games'] = 0
    reset_field(user.id)
    log(user, '–ù–∞—á–∞–ª –Ω–æ–≤—É—é –∏–≥—Ä—É')
    await message.answer(
        text=LEXICON['/game'].format(message.from_user.first_name, users_db[user.id]['attempt']),
        reply_markup=get_field_keyboard(user.id))


@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    await set_main_menu(bot)
    await message.answer(LEXICON['/help'], reply_markup=create_reply_kb())


@dp.message(Command(commands='admins'))
async def process_admins_command(message: Message):
    answer = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø–æ–º:\n'
    for uid in ADMINS:
        answer += f'üòé <a href="tg://user?id={uid}">{users_db.get(uid, {}).get("user_name", "Admin")}</a>\n'
    await message.answer(text=answer, parse_mode="HTML")


@dp.message(Command(commands='raiting'))
async def process_raiting_command(message: Message):
    dump_in_json()
    log(message.from_user, '–ó–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–π—Ç–∏–Ω–≥')
    answer, numb = '–°–ø–∏—Å–æ–∫ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π:\n\n', 1
    for uid in sorted(users_db, key=lambda x: (users_db[x]['total_games'] / (users_db[x]['win'] or 0.1),
                                               -users_db[x]['win'])):
        name = users_db[uid]["user_name"]
        win = users_db[uid]["win"]
        total = users_db[uid]["total_games"]
        answer += f'{numb}. ü§¥ <a href="tg://user?id={uid}">{name}</a> win: {win}' \
                  f' –∏–∑ {total} ({round(win / total * 100, 1)}%)\n'
        numb += 1
    await message.answer(text=answer, parse_mode="HTML")


@dp.callback_query(Text(text='raiting'))
async def process_raiting_callback(callback: CallbackQuery):
    answer, numb = '', 1
    for uid in sorted(users_db, key=lambda x: (users_db[x]['total_games'] / (users_db[x]['win'] or 0.1),
                                               -users_db[x]['win'])):
        name = users_db[uid]["user_name"]
        win = users_db[uid]["win"]
        total = users_db[uid]["total_games"]
        answer += f'{numb}. ü§¥ <a href="tg://user?id={uid}">{name}</a> win: {win}' \
                  f' –∏–∑ {total} ({round(win / total * 100, 1)}%)\n'
        numb += 1
    return await callback.message.edit_text(
        text=LEXICON['/raiting'] + answer,
        parse_mode="HTML",
        reply_markup=create_inline_kb(1, again='–ï—â–µ —Ä–∞—É–Ω–¥!'))


@dp.callback_query(Text(text='again'))
async def process_play_again(callback: CallbackQuery):
    user = callback.from_user
    reset_field(user.id)
    return await callback.message.edit_text(
        text=LEXICON['/start'].format(user.first_name, users_db[user.id]['attempt']),
        reply_markup=get_field_keyboard(user.id))


@dp.callback_query(Text(text='wtf'))
async def process_more_buttons(callback: CallbackQuery):
    user = callback.from_user
    reset_field(user.id)
    return await callback.message.edit_text(
        text=LEXICON['/start'].format(user.first_name, users_db[user.id]['attempt']),
        reply_markup=get_field_keyboard(user.id))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ–ª–µ,
# –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(FieldCallbackFactory.filter())
async def process_category_press(callback: CallbackQuery,
                                 callback_data: FieldCallbackFactory):
    user = callback.from_user
    field = users_db[user.id]['field']
    ships = users_db[user.id]['ships']
    ships_count = users_db[user.id]['ships_count']
    users_db[user.id]['attempt'] -= 1
    attempt = users_db[user.id]['attempt']

    if attempt == 0:
        log(user, '–ü—Ä–æ–∏–≥—Ä–∞–ª –±–æ—Ç—É')
        reset_field(user.id)
        return await callback.message.edit_text(
            text=LEXICON['loose'].format(user.first_name),
            reply_markup=get_field_keyboard(user.id))
    elif field[callback_data.x][callback_data.y] == 0 and \
            ships[callback_data.x][callback_data.y] == 0:
        answer = LEXICON['miss']
        field[callback_data.x][callback_data.y] = 1
    elif field[callback_data.x][callback_data.y] == 0 and \
            ships[callback_data.x][callback_data.y] == 1:
        answer = LEXICON['hit']
        field[callback_data.x][callback_data.y] = 2
    else:
        answer = LEXICON['used']

    field_count = sum([ship.count(2) for ship in field])
    if ships_count - field_count == 0:
        users_db[user.id]['win'] += 1
        log(user, f'–ü–æ–±–µ–¥–∏–ª –∑–∞ {ATTEMPT - attempt} –ø–æ–ø—ã—Ç–æ–∫!')
        return await callback.message.edit_text(
            text=LEXICON['win'].format(user.first_name, ATTEMPT - attempt),
            reply_markup=create_inline_kb(1, again='–ü–æ–≤—Ç–æ—Ä–∏–º?!',
                                          raiting='–†–µ–π—Ç–∏–Ω–≥',
                                          wtf='–ë–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫!'))

    try:
        await callback.message.edit_text(
            text=LEXICON['next_move'].format(attempt, ships_count - field_count),
            reply_markup=get_field_keyboard(user.id), parse_mode='HTML')
    except TelegramBadRequest:
        pass

    await callback.answer(answer)


@dp.message(F.contact)
async def process_contact_share(message: Message):
    msg = f'–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–∏—à–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç\n' \
          f'–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}\n' \
          f'ID: {message.contact.user_id}\n' \
          f'–ò–º—è: {message.contact.first_name}\n' \
          f'–§–∞–º–∏–ª–∏—è: {message.contact.last_name}\n' \
          f'vcard: {message.contact.vcard}'
    print(message.contact)
    await message.answer(text=msg)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ Menu –±–æ—Ç–∞
async def set_main_menu(bot: Bot):
    main_menu_commands = [BotCommand(
        command=command,
        description=description
    ) for command,
          description in LEXICON_COMMANDS2.items()]
    print("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    await bot.set_my_commands(main_menu_commands)


if __name__ == '__main__':
    load_from_json()
    dp.run_polling(bot)
