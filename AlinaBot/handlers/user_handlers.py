import json
from datetime import datetime

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from filters.fsm import FSMFillForm
from aiogram import Router, Bot, F
from aiogram.filters import Command, CommandStart, Text, StateFilter
from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from keyboards.keyboard_builder import create_inline_kb

from lexicon.lexicon import *
import locale

locale.setlocale(category=locale.LC_ALL, locale="ru_RU.utf8")

router: Router = Router()

all_notes = {}


def time_now():
    """–ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –û–°"""
    return datetime.today().strftime('%H:%M:%S')


def log(user, log_text):
    """–°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∞
    —Ü–≤–µ—Ç + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –∏–º—è –±–æ—Ç–∞"""
    color = 90 + user.id % 10
    user_info = f"{user.first_name} {user.last_name if user.last_name else ''} | @{user.username} ({user.id})"
    print(f"\033[{color}m{time_now()}: [{user_info}] --> {log_text}")


def save_info():
    """–°–æ—Ö—Ä–∞–Ω–∏–º –∑–∞–º–µ—Ç–∫–∏ –≤ json-—Ñ–∞–π–ª"""
    with open(f"database/notes.json", 'w', encoding='utf-8') as save:
        json.dump(all_notes, save, indent=4, ensure_ascii=False)


def load_notes():
    """–ó–∞–≥—Ä—É–∑–∏–º –∏–Ω—Ñ–æ –æ –∑–∞–º–µ—Ç–∫–∞—Ö –∏–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å"""
    with open(f"database/notes.json", 'r', encoding='utf-8') as notes:
        notes_list = json.load(notes)
    print(notes_list)
    return notes_list


@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message):
    user = message.from_user
    log(user, '–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')
    await message.answer(
        text=LEXICON['/start'].format(message.from_user.first_name),
        parse_mode="HTML",
        reply_markup=create_inline_kb(2, create_note=LEXICON_BTN['create'],
                                      all_notes=LEXICON_BTN['all_notes']))


@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ.')


@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é')
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


@router.message(Command(commands='create'), StateFilter(default_state))
async def process_fillform_command(message: Message, state: FSMContext):
    user = message.from_user
    log(user, '–í–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ')
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(FSMFillForm.fill_note_name)


@router.message(StateFilter(FSMFillForm.fill_note_name), F.text, lambda x: 1 <= len(x.text) <= 20)
async def process_name_sent(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "name"
    user = message.from_user
    log(user, f'–ù–∞–∑–≤–∞–Ω–∏–µ: {message.text}')
    await state.update_data(name=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(FSMFillForm.fill_note_text)


@router.message(StateFilter(FSMFillForm.fill_note_name))
async def warning_not_name(message: Message):
    await message.answer(text='–ò–º—è –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –¥–æ–ª–≥–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤!\n\n'
                              '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ - '
                              '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel')


@router.message(StateFilter(FSMFillForm.fill_note_text), F.text)
async def process_wish_news_press(message: Message, state: FSMContext):
    user = message.from_user
    log(user, f'–¢–µ–∫—Å—Ç: {message.text}')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á—É "wish_news"
    await state.update_data(text=message.text)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dict = await state.get_data()
    all_notes[user_dict['name']] = user_dict['text']
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    save_info()
    await message.answer(text='–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')


@router.message(Command(commands='notes'))
async def process_admins_command(message: Message):
    answer = ''
    for note in all_notes:
        answer += f'üìù {note}\n'
    await message.answer(
        text=answer,
        parse_mode="HTML",
        reply_markup=create_inline_kb(2, update_note=LEXICON_BTN['update_note'],
                                      delete_note=LEXICON_BTN['delete_note']))


@router.message(Command(commands='admins'))
async def process_admins_command(message: Message):
    admin_ids = {
        171429474: "ü´¶–ê–ª–∏–Ω–∞ - –ê—Ä—Ö–∏–º–∞—Ç—å",
        784724803: 'ü§ñMacross - –∫–æ–¥–µ—Ä',
    }
    answer = ''
    for aid in admin_ids:
        answer += f'<a href="tg://user?id={aid}">{admin_ids[aid]}</a>\n'
    await message.answer(text=answer, parse_mode="HTML")


