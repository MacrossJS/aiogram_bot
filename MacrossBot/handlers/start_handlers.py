import json
import os
import re
from datetime import datetime
from aiogram import Router, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from keyboards.keyboard_builder import create_inline_kb

from lexicon.lexicon import *

router: Router = Router()
clan_info_regex = re.compile(r"^(?P<clan_tag>\[\w+] [\w-]+)",
                             re.IGNORECASE | re.MULTILINE)


def time_now() -> str:
    """–ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –û–°"""
    return datetime.today().strftime('%H:%M:%S')


def log(user: CallbackQuery | Message, log_text: str) -> None:
    """–°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∞: —Ü–≤–µ—Ç + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –∏–º—è –±–æ—Ç–∞"""
    color = 90 + user.from_user.id % 10
    user_info = f"{user.from_user.first_name} {user.from_user.last_name or ''} | @{user.from_user.username or '-'} " \
                f"({user.from_user.id})"
    if isinstance(user, CallbackQuery):
        chat = user.message.chat
    else:
        chat = user.chat

    if chat.type == 'private':
        print(f"\033[{color}m{time_now()}: [{user_info}] --> {log_text}\033[0m")
    else:
        chat_name = chat.title or "–ß–∞—Ç"
        print(f"\033[{color}m{time_now()}: [{chat_name}]>[{user_info}] --> {log_text}\033[0m")


def save_info(guild_tag: str, forest_users: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏–º –≤ json-—Ñ–∞–π–ª"""
    folder_name = f"logs_forest/{guild_tag}"
    os.makedirs(folder_name, exist_ok=True)
    with open(
            f"{folder_name}/{guild_tag}_{datetime.today().strftime('%Y.%m.%d')}.json", 'w', encoding='utf-8'
    ) as save:
        json.dump(forest_users, save, ensure_ascii=False, indent=4)


@router.message(CommandStart())
async def process_start_command(message: Message):
    log(message, '–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')
    qwew = message.from_user.id
    await message.answer(
        text=LEXICON['/start'].format(message.from_user.first_name),
        parse_mode="HTML",
        reply_markup=create_inline_kb(
            2, start_forest=MAIN_BTN['btn_start_forest'],
            start_tokyo=MAIN_BTN['btn_start_tokyo']))


@router.message(lambda message: message.forward_date is not None)
async def handle_forwarded_message(message: Message, bot: Bot):
    if message.forward_from.id != 6527978139:
        await message.answer(text='üòé–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º "–î—É—Ö–∏ –õ–µ—Å–∞"!')
        return
    if datetime.today().timestamp() - message.forward_date > 600:
        await message.answer(text='üïí–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π, –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
        return
    text = message.text
    match = clan_info_regex.search(text)
    if match:
        member_dict: dict = {}
        clan_tag = match.group('clan_tag')
        for user_name, exp, user_id in re.findall(r'(?P<name>\w+) \[.*] (?P<exp>\d+)‚öúÔ∏è /p_(?P<user_id>\d+)', text):
            member_dict[user_id] = {'name': user_name, 'exp': int(exp)}
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
        log(message, f'–ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∏ {clan_tag}')
        save_info(clan_tag, member_dict)
        buttun = {f"clan_{clan_tag}_2": f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ {clan_tag}"}
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await message.answer(text=f"‚úÖ–î–∞–Ω–Ω—ã–µ —Å—Ç–∞–∏ {clan_tag} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
                                  f"‚öôÔ∏è–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–µ–π —Å—Ç–∞–∏ –∏–∑ –±–æ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º --> "
                                  f"<a href='tg://user?id=784724803'><b>Macross</b></a> / "
                                  f"<a href='tg://user?id=1660983940'><b>Baka-Baka</b></a>",
                             reply_markup=create_inline_kb(1, **buttun))
    else:
        await message.answer(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–µ!")
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


@router.message(Command(commands='admins'))
async def process_admins_command(message: Message):
    log(message, '/admins')
    admin_ids = {784724803: {"title": "üßë‚Äçüíª–ö–æ–¥–µ—Ä", "name": "Macross"},
                 171429474: {"title": "‚úèÔ∏è–†–µ–¥–∞–∫—Ç–æ—Ä", "name": "–ê–ª–∏–Ω–∞"},
                 5040538204: {"title": "üåöÔ∏è –ú–∞—Å—Ç–µ—Ä —Å—Ç–∞–∏ p2w", "name": "13th "},
                 }
    answer = '‚öôÔ∏è–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:\n\n'
    for admin_id in admin_ids:
        answer += f'{admin_ids[admin_id]["title"]} >> <a href="tg://user?id={admin_id}">' \
                  f'<b>{admin_ids[admin_id]["name"]}</b></a>\n'
    await message.answer(text=answer, parse_mode="HTML")
