import os
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramNetworkError
from aiogram.types import ChatMemberUpdated
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from keyboards.keyboard_builder import create_reply_kb

from lexicon.lexicon import *

router: Router = Router()


def time_now():
    """–ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –û–°"""
    return datetime.today().strftime('%H:%M:%S')


def log(user: CallbackQuery | Message, log_text: str) -> None:
    """–°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∞: —Ü–≤–µ—Ç + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –∏–º—è –±–æ—Ç–∞"""
    color = 90 + user.from_user.id % 10
    user_name = ''.join(filter(str.isalnum, user.from_user.first_name))
    user_info = f"{user_name} {user.from_user.last_name or ''} | @{user.from_user.username or '-'} " \
                f"({user.from_user.id})"
    if isinstance(user, CallbackQuery):
        chat = user.message.chat
    else:
        chat = user.chat

    if chat.type == 'private':
        print(f"\033[{color}m{time_now()}: [{user_info}] --> {log_text}\033[0m")
    else:
        chat_name = chat.title or "–ß–∞—Ç"
        print(f"\033[{color}m{time_now()}: [{chat_name}]>[{user_info}] --> {log_text}\033[0m")


@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    try:
        await message.answer(LEXICON['/help'], reply_markup=create_reply_kb())
    except TelegramNetworkError as e:
        log(message, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram: {e.message}")

    except Exception as e:
        if str(e) == "Telegram server says Request timeout error":
            log(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        else:
            log(message, f"–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–∞–Ω—è –æ—à–∏–±–∫–∞: {e}")


@router.message(F.content_type.in_({'photo', 'audio', 'voice', 'video', 'document'}))
async def send_echo(message: Message):
    if not message.chat.type == 'private':
        return
    # print(message.json(indent=4, exclude_none=True))
    if message.photo:
        file_type, file_id, unique_id = "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", message.photo[-1].file_id, message.photo[-1].file_unique_id
    elif message.video:
        file_type, file_id, unique_id = "üé¨ –í–∏–¥–µ–æ", message.video.file_id, message.video.file_unique_id
    elif message.audio:
        file_type, file_id, unique_id = "üé∂ –ê—É–¥–∏–æ", message.audio.file_id, message.audio.file_unique_id
    elif message.document:
        file_type, file_id, unique_id = "üìë –î–æ–∫—É–º–µ–Ω—Ç", message.document.file_id, message.document.file_unique_id
    elif message.voice:
        file_type, file_id, unique_id = "üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", message.voice.file_id, message.voice.file_unique_id
    else:
        file_type, file_id, unique_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", None, None
    answer = f"–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏: <b>{file_type}</b>\n\n<b>ID:</b> {file_id}\n\n<b>UNIQUE_ID:</b> {unique_id}"
    await message.answer(answer, parse_mode='HTML')


@router.message(F.photo)
async def download_photo(message: Message, bot: Bot):
    user = message.from_user
    photo = message.photo[-1]
    save_folder = f"{user.id}_@{user.username}"
    if not os.path.exists(f"tmp/{save_folder}"):
        os.mkdir(f"tmp/{save_folder}")
    file_name = f"{message.date.strftime('%Y.%m.%d_–≤_%H-%M-%S')}_{photo.file_unique_id}_" \
                f"{photo.width}x{photo.height}.jpg"
    print(file_name)
    await bot.download(message.photo[-1], destination=f"tmp/{save_folder}/{file_name}")
    await message.answer(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')


@router.message(F.location)
async def handle_location(message: Message):
    if message.location:
        log(message, '–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')
        latitude = message.location.latitude
        longitude = message.location.longitude
        log(message, f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}")
        await message.reply(f"{message.from_user.first_name}, –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}")


@router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def greet_new_member(message: Message, event: ChatMemberUpdated):
    new_member = event.new_chat_member.user
    if new_member:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.first_name}!")
