from pprint import pprint

from aiogram import Bot, Dispatcher, F
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputMediaAudio,
                           InputMediaDocument, InputMediaPhoto,
                           InputMediaVideo, Message, InputFile)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Text, Command
from aiogram.exceptions import TelegramBadRequest
from environs import Env

# –î–æ—Å—Ç–∞–Ω–µ–º –∏–Ω—Ñ—É –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞ .env
env = Env()
env.read_env()

BOT_TOKEN = env('TG_TOKEN', parse_mode='HTML')

bot: Bot = Bot(BOT_TOKEN)
dp: Dispatcher = Dispatcher()

LEXICON: dict[str, str] = {
    'audio': 'üé∂ –ê—É–¥–∏–æ',
    'text': 'üìÉ –¢–µ–∫—Å—Ç',
    'photo': 'üñº –§–æ—Ç–æ',
    'video': 'üé¨ –í–∏–¥–µ–æ',
    'document': 'üìë –î–æ–∫—É–º–µ–Ω—Ç',
    'voice': 'üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    'text_1': '–≠—Ç–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–æ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –º–µ–¥–∏–∞.',
    'text_2': '–≠—Ç–æ —Ç–æ–∂–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.',
    'photo_id1': 'AgACAgIAAxkBAAINl2TEevUIi4HsAX4R_FBcrRafgQHwAAIZ0TEbeoIgStzwYeZXRP-xAQADAgADbQADLwQ',
    'photo_id2': 'AgACAgIAAxkBAAINmWTEeyQ3GuboSVnKZ5PAanY4kCdPAAIa0TEbeoIgSpO41A-s2VveAQADAgADeAADLwQ',
    'voice_id1': 'AwACAgIAAxkBAAINm2TEe3ij2lEHy3B0scaPlKfTaBikAALVNwACeoIgSuJVoYSUb2KrLwQ',
    'voice_id2': 'CQACAgIAAxkBAAIQT2WJy1AZ-CQ1Oo7fdZb8hFnwxpFHAALtRAACYydRSM7xUjk7aRKZMwQ',
    'audio_id1': 'CQACAgIAAxkBAAIN-WTEwHoPPgcaLReYRYaO_JO-qqxSAAJWNQACkKMgSlqbKCXVE3MiLwQ',
    'audio_id2': 'CQACAgIAAxkBAAIN-2TEwJ7OFWOQQ2dbsJ3yGbezGFwEAAJXNQACkKMgSuewIRQ2qISSLwQ',
    'document_id1': 'BQACAgIAAxkBAAINo2TEfGWUTsXmBLQakrpZBfnqnQKnAALZNwACeoIgSiPzjlcg3b-RLwQ',
    'document_id2': 'BQACAgIAAxkBAAINpWTEfIuZf9ke7TNaUk7VYUDE7k05AALaNwACeoIgSmqHH_oY-_ROLwQ',
    'video_id1': 'BAACAgIAAxkBAAINp2TEfLyJATjgtUCC8zuGLWS-jDnIAALbNwACeoIgSqwWV9zj4saYLwQ',
    'video_id2': 'BAACAgIAAxkBAAINqWTEfOAbqxrYDmr4riF7maC9GFWQAALeNwACeoIgSr9QwCj6d6_1LwQ',
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
def get_markup(width: int, *args, **kwargs) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))
    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(
                text=text,
                callback_data=button))
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    markup = get_markup(2, 'video')
    await message.answer_photo(
        photo=LEXICON['photo_id1'],
        caption='–≠—Ç–æ —Ñ–æ—Ç–æ 1',
        reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(Text(text=['text', 'audio', 'video', 'document', 'photo', 'voice']))
async def process_button_press(callback: CallbackQuery):
    # print(callback.message.json(indent=4, exclude_none=True))
    if callback.message.photo:
        markup = get_markup(1, 'document')
        await callback.message.edit_media(
            media=InputMediaVideo(media=LEXICON['video_id1'],
                                  caption='–≠—Ç–æ –≤–∏–¥–µ–æ 1'), reply_markup=markup)
    if callback.message.video:
        markup = get_markup(1, 'audio')
        await callback.message.edit_media(
            media=InputMediaDocument(media=LEXICON['document_id2'],
                                     caption='–≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç 2'), reply_markup=markup)
    if callback.message.document:
        markup = get_markup(1, 'photo')
        await callback.message.edit_media(
            media=InputMediaAudio(media=LEXICON['audio_id1'],
                                  caption='–≠—Ç–æ –º—É–∑—ã–∫–∞'), reply_markup=markup)

    if callback.message.audio:
        markup = get_markup(1, 'video')
        await callback.message.edit_media(
            media=InputMediaPhoto(media=LEXICON['photo_id2'],
                                  caption='–≠—Ç–æ —Ñ–æ—Ç–æ 2'), reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands='help'))
async def process_help_command(message: Message):
    with open("voice_1.ogg", 'rb') as voice_file:
        voice = InputFile(voice_file)
        await bot.send_voice(message.chat.id, voice)


@dp.message(F.content_type.in_({'photo', 'audio', 'voice', 'video', 'document'}))
async def send_echo(message: Message):
    print(message.json(indent=4, exclude_none=True))
    if message.photo:
        file_type, file_id, unique_id = "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", message.photo[-1].file_id, message.photo[-1].file_unique_id
    elif message.video:
        file_type, file_id, unique_id = "üé¨ –í–∏–¥–µ–æ", message.video.file_id, message.video.file_unique_id
    elif message.audio:
        file_type, file_id, unique_id = "üé∂ –ê—É–¥–∏–æ", message.audio.file_id, message.audio.file_unique_id
    elif message.document:
        file_type, file_id, unique_id = "üìë –î–æ–∫—É–º–µ–Ω—Ç", message.document.file_id, message.document.file_unique_id
    elif message.voice:
        file_type, file_id, unique_id = "üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", message.voice.file_id, message.voice.file_unique_id
    else:
        file_type, file_id, unique_id = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", None, None
    answer = f"–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏: <b>{file_type}</b>\n\n<b>ID:</b> {file_id}\n\n<b>UNIQUE_ID:</b> {unique_id}"
    await message.answer(answer, parse_mode='HTML')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def send_echo(message: Message):
    print(message.json(indent=4, exclude_none=True))
    await message.answer(
        text='–ù–µ –ø–æ–Ω–∏–º–∞—é')


if __name__ == '__main__':
    dp.run_polling(bot)
